@startuml
!pragma layout smetana
'https://plantuml.com/class-diagram
abstract class HttpServlet

class AdminDeleteOrderServlet extends HttpServlet
class AdminOrderServlet extends HttpServlet
class AdminUpdateStatusServlet extends HttpServlet
class AdminViewOrderServlet extends HttpServlet
class CreateProfileServlet extends HttpServlet
class CreateUserServlet extends HttpServlet
class EditOrderServlet extends HttpServlet
class Login extends HttpServlet
class Logout extends HttpServlet
class OrderCarportServlet extends HttpServlet
class ViewOrdersServlet extends HttpServlet

interface ServletContextListener
class ApplicationStart implements ServletContextListener

class Material
class Order
enum Status {
    BESTILT
    BEHANDLES
    AFSLUTTET
}
class User

class Exception
class DatabaseException extends Exception

class ConnectionPool
class MaterialFacade {
+ {static} Material getMaterialById(int id, ConnectionPool connectionPool)
+ {static} Material getMaterialByNameAndLength(String name, int length, ConnectionPool connectionPool)
+ {static} public static void createOrderLink(Order order, List<Pair<Material, Integer>> materials, ConnectionPool connectionPool)
+ {static} public static Map<Integer, List<Pair<Material, Integer>>> getOrderLinkMap(ConnectionPool connectionPool)
}

class OrderFacade {
+ {static} List<Order> getAllOrders(ConnectionPool connectionPool)
+ {static} boolean createOrder(Order order, ConnectionPool connectionPool)
+ {static}List<Order> viewOrder(User user, ConnectionPool connectionPool)
+ {static} boolean removeOrder(int orderId, ConnectionPool connectionPool)
+ {static} boolean updateStatus(int status, int orderId, ConnectionPool connectionPool)
+ {static} boolean editOrder(Order order, ConnectionPool connectionPool)
}

class UserFacade {
+ {static} User login(String username, String password, ConnectionPool connectionPool)
+ {static} User createUser(String username, String password, int role, ConnectionPool connectionPool)
+ {static} boolean doesUserExist(String email, ConnectionPool connectionPool)
+ {static} int getId(String email, ConnectionPool connectionPool)
+ {static} void updateUserProfile(User user, ConnectionPool connectionPool)


}
class MaterialMapper{
# {static} Material getMaterialById(int id, ConnectionPool connectionPool)
# {static} Material getMaterialByNameAndLength(String name, int length, ConnectionPool connectionPool)
# {static} void createOrderLink(Order order, List<Pair<Material, Integer>> materials, ConnectionPool connectionPool)
# {static} Map<Integer, List<Pair<Material, Integer>>> getOrderLinkMap(ConnectionPool connectionPool)
# {static} Map<Integer, Material> getMaterialMap(Connection connection)
}

class OrderMapper{
# {static} List<Order> getAllOrders(ConnectionPool connectionPool)
# {static} Order getOrderById(int id, ConnectionPool connectionPool)
# {static} List<Pair<Material, Integer>> getOrderMaterials(int id, ConnectionPool connectionPool)
# {static} boolean createOrder(Order order, ConnectionPool connectionPool)
# {static} List<Order> viewOrder(User user, ConnectionPool connectionPool)
# {static} boolean removeOrder(int orderId, ConnectionPool connectionPool)
# {static} boolean updateStatus(int statusOrdinal, int orderId, ConnectionPool connectionPool)
# {static} List<Order> getAllOrdersWithoutMaterials(ConnectionPool connectionPool)
# {static} boolean editOrder(Order order, ConnectionPool connectionPool)
}

class UserMapper{
# {static} User login(String username, String password, ConnectionPool connectionPool)
# {static} User createUser(String username, String password, int role, ConnectionPool connectionPool)
# {static} boolean doesUserExist(String email, ConnectionPool connectionPool)
# {static} int getId(String email, ConnectionPool connectionPool)
# {static} void updateUserProfile(User user, ConnectionPool connectionPool)
# {static} Map<Integer, User> getAllUsers(Connection connection)
}

class MaterialListAlgorithm {
    + {static} void calcMaterialList(Order order, ConnectionPool connectionPool)
    + {static} Pair<Material, Integer> getPurlins(ConnectionPool connectionPool, int length)
    + {static} Pair<Material, Integer> getRafters(ConnectionPool connectionPool, int length, int width)
    + {static} Pair<Material, Integer> getPosts(ConnectionPool connectionPool, int length, int height)
}

OrderFacade --|> OrderMapper
UserFacade --|> UserMapper
MaterialFacade --|> MaterialMapper

AdminDeleteOrderServlet ..|> OrderFacade : uses
AdminOrderServlet ..|> OrderFacade : uses
AdminUpdateStatusServlet ..|> OrderFacade : uses
OrderCarportServlet ..|> OrderFacade : uses
EditOrderServlet ..|> OrderFacade : uses
ViewOrdersServlet ..|> OrderFacade : uses

CreateProfileServlet ..|> UserFacade : uses
CreateUserServlet ..|> UserFacade : uses
Login ..|> UserFacade : uses
OrderCarportServlet ..|> UserFacade : uses

MaterialListAlgorithm ..|> MaterialFacade : uses
OrderCarportServlet ..|> MaterialListAlgorithm : uses



@enduml